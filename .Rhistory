yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 1
dsct <- 0.5
p.shape <- 2
p.scale <- 2
N <- rep(1000, J)
n.tab <- rep(400, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 1
dsct <- 0.5
p.shape <- 10
p.scale <- 2
N <- rep(1000, J)
n.tab <- rep(400, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(400, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(10, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(5, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(25, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(50, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
# Testing table sampler
J <- 10
K <- 10
rep(rpois(1),5)
rep(rpois(1,1),5)
c1 <- rpois(K, 50)
c1
c1 <- matrix(rpois(J*K, 50), J, K)
c1
s <- b_sampler(c1, 2000, 1000)
s$tab
s$t.c
set.seed(24601)
J <- 100
conc <- 0.1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(50, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 0.1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(2, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.001)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 0.1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(20, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.001)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 0.1
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(200, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.001)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 100
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(200, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.001)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
set.seed(24601)
J <- 100
conc <- 100
dsct <- 0.5
p.shape <- 2
p.scale <- 10
N <- rep(1000, J)
n.tab <- rep(100, J)
q <- rbeta(J, conc, N)
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc, p.shape, Q, n.tab, dsct)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
xv <- seq(max(0.001, mc-mc/2), mc+mc/2, by=0.001)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, n.tab, dsct)
}
#plot(xv, exp(yv-max(yv)), type="l")
#abline(v=mc, col="red", lwd=2, lty=2)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc, p.shape, p.scale, n.tab, N, dsct)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
sourceCpp("C/stirling.c")
library(Rcpp)
sourceCpp("C/stirling.c")
sourceCpp("C/stirling.cpp")
meanC(rnorm(10))
library(microbenchmark)
x <- runif(1e5)
microbenchmark(
mean(x),
meanC(x)
)
meanC(rnorm(100))
x
sourceCpp("C/stirling.cpp")
meanC(rnorm(10))
meanC(rnorm(10))
meanC(rnorm(10))
meanC(rnorm(10))
meanC(rnorm(10))
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
library(Rcpp)
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
meanC(rnorm(2000))
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
meanC(rnorm(2000))
meanC(rnorm(2000))
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
?sourceCpp
globalenv()
Rcpp::depends
Rcpp::depends
dyndyn.load("C/stable.so")
dyn.load("C/stable.so")
dyn.load("C/stable.so")
sourceCpp("C/stirling.cpp")
sourceCpp("C/stirling.cpp")
meanC(rnorm(100))
meanC(rnorm(100))
meanC(rnorm(100))
meanC(rnorm(100))
meanC(rnorm(100))
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
dyn.load("C/stirling.so")
dyn.load("C/stirling.so")
dyn.load("C/stirling.so")
dyn.load("C/stirling.so")
dyn.load("C/stirling.so")
dyn.load("C/stirling.so")
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
meanC(rnorm(25))
meanC(rnorm(25))
meanC(rnorm(25))
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
Rcpp::sourceCpp('C/stirling.cpp')
setwd("/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor")
Rcpp.package.skeleton("b_sampler", module = TRUE)
