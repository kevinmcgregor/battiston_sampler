conc.samp[i] <- samp_conc(conc.top, p.shape,
p.scale, s.hpy$n.sp, 1, sum(s.hpy$t.tab), dsct.top, Q=Q)
}
xv <- seq(min(conc.samp), max(conc.samp), by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, s.hpy$n.sp, dsct.top)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
q <- rbeta(1, conc.top, sum(s.hpy$t.tab))
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc.top, p.shape, Q, s.hpy$n.sp, dsct.top)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc.top, p.shape,
p.scale, s.hpy$n.sp, 1, sum(s.hpy$t.tab), dsct.top, Q=Q)
}
xv <- seq(min(conc.samp), max(conc.samp), by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, s.hpy$n.sp, dsct.top)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
q <- rbeta(1, conc.top, sum(s.hpy$t.tab))
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc.top, p.shape, Q, s.hpy$n.sp, dsct.top)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc.top, p.shape,
p.scale, s.hpy$n.sp, 1, sum(s.hpy$t.tab), dsct.top, Q=Q)
}
xv <- seq(min(conc.samp), max(conc.samp), by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, s.hpy$n.sp, dsct.top)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
q <- rbeta(1, conc.top, sum(s.hpy$t.tab))
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc.top, p.shape, Q, s.hpy$n.sp, dsct.top)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc.top, p.shape,
p.scale, s.hpy$n.sp, 1, sum(s.hpy$t.tab), dsct.top, Q=Q)
}
xv <- seq(min(conc.samp), max(conc.samp), by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, s.hpy$n.sp, dsct.top)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
q <- rbeta(1, conc.top, sum(s.hpy$t.tab))
Q <- 1/p.scale - sum(log(q))
mc <- map_conc(conc.top, p.shape, Q, s.hpy$n.sp, dsct.top)
#s.samp <- slice_conc(mc, p.shape, Q, n.tab, dsct)
# Testing the final sampler for the concentration parameter
n.samp <- 1000
conc.samp <- rep(0, n.samp)
for (i in 1:n.samp) {
conc.samp[i] <- samp_conc(conc.top, p.shape,
p.scale, s.hpy$n.sp, 1, sum(s.hpy$t.tab), dsct.top, Q=Q)
}
xv <- seq(min(conc.samp), max(conc.samp), by=0.01)
yv <- rep(0, length(xv))
for (i in 1:length(xv)) {
yv[i] <- prob_conc(xv[i], p.shape, Q, s.hpy$n.sp, dsct.top)
}
# Scaling curve to plot over histogram
h.vals <- hist(conc.samp, breaks=20)
max.hval <- max(h.vals$counts)
lines(xv, max.hval*exp(yv-max(yv)))
abline(v=mc, col="red", lwd=2, lty=2)
debugSource('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = 1, p.scale = 1)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
conc.map
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
N <- 1000
J <- 10
conc.top <- 50
dsct.top <- 0.2
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Prior hyper-params
p.shape = 2
p.scale = 20
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
# Running parallel chains
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
p.scale = 2
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
p.scale = 50
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
p.scale = 20
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/plots/fixed_params"
# Sampling from HPY
N <- 1000
J <- 10
conc.top <- 50
dsct.top <- 0.8
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
# Running parallel chains
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
hist(s.p[[1]]$gamma)
hist(s.p[[2]]$gamma)
hist(s.p[[3]]$gamma)
hist(s.p[[4]]$gamma)
N <- 1000
J <- 50
conc.top <- 50
dsct.top <- 0.8
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Y <- matrix(0, NROW(s.hpy$abund), NCOL(s.hpy$abund))
# for (i in 1:J) {
#   Y[i,] <- t(rmultinom(1, N, s.hpy$abund[i,]))
# }
# Prior hyper-params
p.shape = 2
p.scale = 20
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=2000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
N <- 1000
J <- 100
conc.top <- 50
dsct.top <- 0.8
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
dim(Y)
# Prior hyper-params
p.shape = 2
p.scale = 20
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
mean(s.p[[1]]$gamma)
mean(s.p[[2]]$gamma)
mean(s.p[[3]]$gamma)
mean(s.p[[4]]$gamma)
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/plots/fixed_params"
# Sampling from HPY
N <- 1000
J <- 100
conc.top <- 50
dsct.top <- 0.1
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Prior hyper-params
p.shape = 2
p.scale = 20
library(parallel)
n.chain <- 4
Y.list <- vector("list", n.chain)
for (i in 1:n.chain) Y.list[[i]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=n.chain)
par(mfrow=c(1,1), mar=rep(2,4))
tmp <- unlist(lapply(s.p, function(x) {x$gamma}))
y.rge <- range(tmp, conc.top)
plot(s.p[[1]]$gamma, type="l", ylim=y.rge, col=col[1])
for (i in 1:n.chain) {
lines(s.p[[i]]$gamma, ylim=y.rge, col=col[[i]])
}
abline(h=conc.top, col="black", lty=2, lwd=2)
dsct.vals <- seq(0.1,0.9, by=0.1)
dsct.vals
# Checking top-level concentration param
# Simulating data under different top-level discount params and checking bias
# of top-level concentration param
source("~/research/pitman_yor/battiston_sampler/R/b_sampler.R")
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
p.shape = 2
p.scale = 20
# When running sampler, make sure to fix top-level discount in code
bias <- rep(0, length(dsct.vals))
for (i in 1:length(dsct.vals)) {
cat("dsct = ", dsct.vals[i], "\n")
dsct.top <- dsct.vals[i]
# Simulate data
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Run sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
# Bias of top-level concentration
bias[i] <- mean(s$gamma) - conc.top
}
bias
plot(dsct.vals, bias, type="l")
plot(dsct.vals, bias, type="l", lwd=2)
abline(h=0, lty=2, col="red", lwd=2)
plot(dsct.vals, bias, type="o", lwd=2)
abline(h=0, lty=2, col="red", lwd=2)
dsct.vals <- seq(0.1,0.9, by=0.05)
dsct.vals
bias <- rep(0, length(dsct.vals))
for (i in 1:length(dsct.vals)) {
cat("dsct = ", dsct.vals[i], "\n")
dsct.top <- dsct.vals[i]
# Simulate data
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Run sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
# Bias of top-level concentration
bias[i] <- mean(s$gamma) - conc.top
}
plot(dsct.vals, bias, type="o", lwd=2)
abline(h=0, lty=2, col="red", lwd=2)
s$gamma
mean(s$gamma)
conc.top
# Checking top-level concentration param
# Simulating data under different top-level discount params and checking bias
# of top-level concentration param
library(parallel)
# When running sampler, make sure to fix top-level discount in code
n.chain <- 4
Y.list <- vector("list", n.chain)
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=n.chain)
for (j in 1:n.chain) Y.list[[j]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=n.chain)
s.p[[1]]$gamma
lapply(s.p, function(x){x$gamma})
unlist(lapply(s.p, function(x){x$gamma}))
# Bias of top-level concentration
gamma.samp <- unlist(lapply(s.p, function(x){x$gamma}))
length(gamma.samp)
mean(gamma.samp)
conc.top
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
plot(dsct.vals, bias, type="o", lwd=2)
abline(h=0, lty=2, col="red", lwd=2)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
p.shape = sqrt(25)
p.scale = sqrt(25)
n.chain <- 4
Y.list <- vector("list", n.chain)
bias <- rep(0, length(dsct.vals))
for (i in 1:length(dsct.vals)) {
cat("dsct = ", dsct.vals[i], "\n")
dsct.top <- dsct.vals[i]
# Simulate data
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
for (j in 1:n.chain) Y.list[[j]] <- Y
s.p <- mclapply(Y.list, b_sampler, p.shape = p.shape, p.scale = p.scale,
n.iter=1000, n.burn=200, mc.cores=n.chain)
# Bias of top-level concentration
gamma.samp <- unlist(lapply(s.p, function(x){x$gamma}))
bias[i] <- mean(gamma.samp) - conc.top
}
plot(dsct.vals, bias, type="o", lwd=2)
abline(h=0, lty=2, col="red", lwd=2)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/R/hpy_functions.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/R/hpy_functions.R', echo=TRUE)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/R/hpy_functions.R', echo=TRUE)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
s.hpy$n.sp
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
summary(lm(dsct.vals, bias))
summary(lm(bias~dsct.vals))
s.hpy$t.tab
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/test_b_sampler.R', echo=TRUE)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
dev.off()
plot(dsct.vals, bias, type="o", lwd=2)
abline(h=0, lty=2, col="red", lwd=2)
s.hpy$t.tab
s.hpy$n.s.tab
debugSource('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
source("~/research/pitman_yor/battiston_sampler/R/b_sampler.R")
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/plots/fixed_params"
# Sampling from HPY
N <- 1000
J <- 25
conc.top <- 50
dsct.top <- 0.1
conc.local <- rep(5, J)
dsct.local <- rep(0.3, J)
s.hpy <- sample_hpy(J, rep(N, J), conc.top, dsct.top, conc.local, dsct.local)
Y <- s.hpy$abund
# Prior hyper-params
p.shape = 2
p.scale = 20
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
debugSource('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
q
J
conc
print(n)
s.hpy$t.tab
sum(s.hpy$t.tab)
s.hpy$tab[[1]]
sum(s.hpy$tab[[1]][,2])
debugSource('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
# Running Battiston sampler
s <- b_sampler(Y, 1000, 200, p.shape = p.shape, p.scale = p.scale)
n.tab
s.hpy$t.tab
sum(n.tab)
alpha
K
dim(Y)
gamma
p.shape
p.scale
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/test_b_sampler.R', echo=TRUE)
gc()
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/check_conc_top.R', echo=TRUE)
dev.off()
plot(dsct.vals, bias, type="o", lwd=2)
abline(h=0, lty=2, col="red", lwd=2)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/battiston_sampler/R/b_sampler.R', echo=TRUE)
library(gStirling)
sampConc(0.5, 1, 1, 1, 1, 0.5)
